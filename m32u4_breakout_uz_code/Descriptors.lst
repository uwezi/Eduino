   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB94:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in SRAM memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = CDC_CSCP_CDCClass,
  51:Descriptors.c **** 	.SubClass               = CDC_CSCP_NoSpecificSubclass,
  52:Descriptors.c **** 	.Protocol               = CDC_CSCP_NoSpecificProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = DEVICE_VID,
  57:Descriptors.c **** 	.ProductID              = DEVICE_PID,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = 0x02,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x01,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in SRAM memory, describes the usag
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_BUSPOWERED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCClass,
  99:Descriptors.c **** 			.SubClass               = CDC_CSCP_ACMSubclass,
 100:Descriptors.c **** 			.Protocol               = CDC_CSCP_ATCommandProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = 0x00,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(01.10),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = 0x02,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x04,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = 0x06,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = 0,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = 1,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = 1,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCDataClass,
 150:Descriptors.c **** 			.SubClass               = CDC_CSCP_NoDataSubclass,
 151:Descriptors.c **** 			.Protocol               = CDC_CSCP_NoDataProtocol,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.CDC_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_RX_EPNUM),
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.CDC_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_TX_EPNUM),
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in SRAM memory, is returned when the ho
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** const USB_Descriptor_String_t LanguageString =
 182:Descriptors.c **** {
 183:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 184:Descriptors.c **** 
 185:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 189:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 190:Descriptors.c ****  *  Descriptor.
 191:Descriptors.c ****  */
 192:Descriptors.c **** const USB_Descriptor_String_t ProductString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(14), .Type = DTYPE_String},
 195:Descriptors.c **** 
 196:Descriptors.c **** 	#if DEVICE_PID == 0x9209
 197:Descriptors.c **** 	.UnicodeString          = L"WiFlyin'      "
 198:Descriptors.c **** 	#elif DEVICE_PID == 0x9207
 199:Descriptors.c **** 	.UnicodeString          = L"LilyPadUSB    " 
 200:Descriptors.c **** 	#elif DEVICE_PID == 0x9205
 201:Descriptors.c **** 	.UnicodeString          = L"Pro Micro 5V  " 
 202:Descriptors.c **** 	#elif DEVICE_PID == 0x9203
 203:Descriptors.c **** 	.UnicodeString			= L"Pro Micro 3.3V"
 204:Descriptors.c **** 	#elif DEVICE_PID == 0x2B74
 205:Descriptors.c **** 	.UnicodeString			= L"MaKey MaKey   "
 206:Descriptors.c **** 	#else
 207:Descriptors.c **** 	.UnicodeString			= L"USB IO board  "
 208:Descriptors.c **** 	#endif
 209:Descriptors.c **** };
 210:Descriptors.c **** 
 211:Descriptors.c **** const USB_Descriptor_String_t ManufNameString = 
 212:Descriptors.c **** {
 213:Descriptors.c **** 	.Header					= {.Size = USB_STRING_LEN(20), .Type = DTYPE_String},
 214:Descriptors.c **** 	
 215:Descriptors.c **** 	#if DEVICE_VID == 0x1B4F
 216:Descriptors.c **** 	.UnicodeString			= L"SparkFun Electronics"
 217:Descriptors.c **** 	#else
 218:Descriptors.c **** 	.UnicodeString			= L"Unknown             "
 219:Descriptors.c **** 	#endif
 220:Descriptors.c **** };
 221:Descriptors.c **** 
 222:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see LUFA li
 223:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 224:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 225:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 226:Descriptors.c ****  *  USB host.
 227:Descriptors.c ****  */
 228:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 229:Descriptors.c ****                                     const uint8_t wIndex,
 230:Descriptors.c ****                                     const void** const DescriptorAddress)
 231:Descriptors.c **** {
  16               		.loc 1 231 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 232:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 233:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 234:Descriptors.c **** 
 235:Descriptors.c **** 	const void* Address = NULL;
 236:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 237:Descriptors.c **** 
 238:Descriptors.c **** 	switch (DescriptorType)
  23               		.loc 1 238 0
  24 0000 292F      		mov r18,r25
  25 0002 30E0      		ldi r19,0
  26 0004 2230      		cpi r18,2
  27 0006 3105      		cpc r19,__zero_reg__
  28 0008 01F0      		breq .L3
  29 000a 2330      		cpi r18,3
  30 000c 3105      		cpc r19,__zero_reg__
  31 000e 01F0      		breq .L4
  32 0010 2130      		cpi r18,1
  33 0012 3105      		cpc r19,__zero_reg__
  34 0014 01F4      		brne .L9
 239:Descriptors.c **** 	{
 240:Descriptors.c **** 		case DTYPE_Device:
 241:Descriptors.c **** 			Address = &DeviceDescriptor;
 242:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  35               		.loc 1 242 0
  36 0016 82E1      		ldi r24,lo8(18)
  37 0018 90E0      		ldi r25,0
  38               	.LVL1:
 241:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  39               		.loc 1 241 0
  40 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  41 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  42 001e 00C0      		rjmp .L2
  43               	.LVL2:
  44               	.L3:
 243:Descriptors.c **** 			break;
 244:Descriptors.c **** 		case DTYPE_Configuration:
 245:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 246:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  45               		.loc 1 246 0
  46 0020 8EE3      		ldi r24,lo8(62)
  47 0022 90E0      		ldi r25,0
  48               	.LVL3:
 245:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  49               		.loc 1 245 0
  50 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  51 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
  52               	.LVL4:
 247:Descriptors.c **** 			break;
  53               		.loc 1 247 0
  54 0028 00C0      		rjmp .L2
  55               	.LVL5:
  56               	.L4:
 248:Descriptors.c **** 		case DTYPE_String:
 249:Descriptors.c **** 			if (!(DescriptorNumber))
  57               		.loc 1 249 0
  58 002a 8823      		tst r24
  59 002c 01F0      		breq .L7
 250:Descriptors.c **** 			{
 251:Descriptors.c **** 				Address = &LanguageString;
 252:Descriptors.c **** 				Size    = LanguageString.Header.Size;
 253:Descriptors.c **** 			}
 254:Descriptors.c **** 			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
  60               		.loc 1 254 0
  61 002e 8130      		cpi r24,lo8(1)
  62 0030 01F0      		breq .L8
 255:Descriptors.c **** 			{
 256:Descriptors.c **** 				Address = &ProductString;
 257:Descriptors.c **** 				Size    = ProductString.Header.Size;
 258:Descriptors.c **** 			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
  63               		.loc 1 258 0
  64 0032 8230      		cpi r24,lo8(2)
  65 0034 01F4      		brne .L9
 259:Descriptors.c **** 			{
 260:Descriptors.c **** 				Address = &ManufNameString;
 261:Descriptors.c **** 				Size	= ManufNameString.Header.Size;
  66               		.loc 1 261 0
  67 0036 8AE2      		ldi r24,lo8(42)
  68 0038 90E0      		ldi r25,0
  69               	.LVL6:
 260:Descriptors.c **** 				Size	= ManufNameString.Header.Size;
  70               		.loc 1 260 0
  71 003a 20E0      		ldi r18,lo8(ManufNameString)
  72 003c 30E0      		ldi r19,hi8(ManufNameString)
  73               	.LVL7:
  74 003e 00C0      		rjmp .L2
  75               	.LVL8:
  76               	.L7:
 252:Descriptors.c **** 			}
  77               		.loc 1 252 0
  78 0040 84E0      		ldi r24,lo8(4)
  79 0042 90E0      		ldi r25,0
  80               	.LVL9:
 251:Descriptors.c **** 				Size    = LanguageString.Header.Size;
  81               		.loc 1 251 0
  82 0044 20E0      		ldi r18,lo8(LanguageString)
  83 0046 30E0      		ldi r19,hi8(LanguageString)
  84               	.LVL10:
  85 0048 00C0      		rjmp .L2
  86               	.LVL11:
  87               	.L8:
 257:Descriptors.c **** 			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
  88               		.loc 1 257 0
  89 004a 8EE1      		ldi r24,lo8(30)
  90 004c 90E0      		ldi r25,0
  91               	.LVL12:
 256:Descriptors.c **** 				Size    = ProductString.Header.Size;
  92               		.loc 1 256 0
  93 004e 20E0      		ldi r18,lo8(ProductString)
  94 0050 30E0      		ldi r19,hi8(ProductString)
  95               	.LVL13:
  96 0052 00C0      		rjmp .L2
  97               	.LVL14:
  98               	.L9:
 236:Descriptors.c **** 
  99               		.loc 1 236 0
 100 0054 80E0      		ldi r24,0
 101 0056 90E0      		ldi r25,0
 102               	.LVL15:
 235:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 103               		.loc 1 235 0
 104 0058 20E0      		ldi r18,0
 105 005a 30E0      		ldi r19,0
 106               	.LVL16:
 107               	.L2:
 262:Descriptors.c **** 			}
 263:Descriptors.c **** 
 264:Descriptors.c **** 			break;
 265:Descriptors.c **** 	}
 266:Descriptors.c **** 
 267:Descriptors.c **** 	*DescriptorAddress = Address;
 108               		.loc 1 267 0
 109 005c FA01      		movw r30,r20
 110 005e 3183      		std Z+1,r19
 111 0060 2083      		st Z,r18
 268:Descriptors.c **** 	return Size;
 269:Descriptors.c **** }
 112               		.loc 1 269 0
 113 0062 0895      		ret
 114               		.cfi_endproc
 115               	.LFE94:
 117               	.global	ManufNameString
 118               		.section	.rodata
 121               	ManufNameString:
 122 0000 2A        		.byte	42
 123 0001 03        		.byte	3
 124 0002 5300      		.string	"S"
 125 0004 7000      		.string	"p"
 126 0006 6100      		.string	"a"
 127 0008 7200      		.string	"r"
 128 000a 6B00      		.string	"k"
 129 000c 4600      		.string	"F"
 130 000e 7500      		.string	"u"
 131 0010 6E00      		.string	"n"
 132 0012 2000      		.string	" "
 133 0014 4500      		.string	"E"
 134 0016 6C00      		.string	"l"
 135 0018 6500      		.string	"e"
 136 001a 6300      		.string	"c"
 137 001c 7400      		.string	"t"
 138 001e 7200      		.string	"r"
 139 0020 6F00      		.string	"o"
 140 0022 6E00      		.string	"n"
 141 0024 6900      		.string	"i"
 142 0026 6300      		.string	"c"
 143 0028 7300      		.string	"s"
 144 002a 00        		.string	""
 145 002b 00        		.string	""
 146               	.global	ProductString
 149               	ProductString:
 150 002c 1E        		.byte	30
 151 002d 03        		.byte	3
 152 002e 5000      		.string	"P"
 153 0030 7200      		.string	"r"
 154 0032 6F00      		.string	"o"
 155 0034 2000      		.string	" "
 156 0036 4D00      		.string	"M"
 157 0038 6900      		.string	"i"
 158 003a 6300      		.string	"c"
 159 003c 7200      		.string	"r"
 160 003e 6F00      		.string	"o"
 161 0040 2000      		.string	" "
 162 0042 3500      		.string	"5"
 163 0044 5600      		.string	"V"
 164 0046 2000      		.string	" "
 165 0048 2000      		.string	" "
 166 004a 00        		.string	""
 167 004b 00        		.string	""
 168               	.global	LanguageString
 171               	LanguageString:
 172 004c 04        		.byte	4
 173 004d 03        		.byte	3
 174 004e 0904      		.word	1033
 175               	.global	ConfigurationDescriptor
 178               	ConfigurationDescriptor:
 179 0050 09        		.byte	9
 180 0051 02        		.byte	2
 181 0052 3E00      		.word	62
 182 0054 02        		.byte	2
 183 0055 01        		.byte	1
 184 0056 00        		.byte	0
 185 0057 80        		.byte	-128
 186 0058 32        		.byte	50
 187 0059 09        		.byte	9
 188 005a 04        		.byte	4
 189 005b 00        		.byte	0
 190 005c 00        		.byte	0
 191 005d 01        		.byte	1
 192 005e 02        		.byte	2
 193 005f 02        		.byte	2
 194 0060 01        		.byte	1
 195 0061 00        		.byte	0
 196 0062 05        		.byte	5
 197 0063 24        		.byte	36
 198 0064 00        		.byte	0
 199 0065 1001      		.word	272
 200 0067 04        		.byte	4
 201 0068 24        		.byte	36
 202 0069 02        		.byte	2
 203 006a 04        		.byte	4
 204 006b 05        		.byte	5
 205 006c 24        		.byte	36
 206 006d 06        		.byte	6
 207 006e 00        		.byte	0
 208 006f 01        		.byte	1
 209 0070 07        		.byte	7
 210 0071 05        		.byte	5
 211 0072 82        		.byte	-126
 212 0073 03        		.byte	3
 213 0074 0800      		.word	8
 214 0076 FF        		.byte	-1
 215 0077 09        		.byte	9
 216 0078 04        		.byte	4
 217 0079 01        		.byte	1
 218 007a 00        		.byte	0
 219 007b 02        		.byte	2
 220 007c 0A        		.byte	10
 221 007d 00        		.byte	0
 222 007e 00        		.byte	0
 223 007f 00        		.byte	0
 224 0080 07        		.byte	7
 225 0081 05        		.byte	5
 226 0082 04        		.byte	4
 227 0083 02        		.byte	2
 228 0084 1000      		.word	16
 229 0086 01        		.byte	1
 230 0087 07        		.byte	7
 231 0088 05        		.byte	5
 232 0089 83        		.byte	-125
 233 008a 02        		.byte	2
 234 008b 1000      		.word	16
 235 008d 01        		.byte	1
 236               	.global	DeviceDescriptor
 239               	DeviceDescriptor:
 240 008e 12        		.byte	18
 241 008f 01        		.byte	1
 242 0090 1001      		.word	272
 243 0092 02        		.byte	2
 244 0093 00        		.byte	0
 245 0094 00        		.byte	0
 246 0095 08        		.byte	8
 247 0096 4F1B      		.word	6991
 248 0098 0592      		.word	-28155
 249 009a 0100      		.word	1
 250 009c 02        		.byte	2
 251 009d 01        		.byte	1
 252 009e 00        		.byte	0
 253 009f 01        		.byte	1
 254               		.text
 255               	.Letext0:
 256               		.file 2 "/usr/lib/avr/include/stdint.h"
 257               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 258               		.file 4 "../../LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 259               		.file 5 "../../LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 260               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/cc0dLyEt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc0dLyEt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc0dLyEt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc0dLyEt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc0dLyEt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc0dLyEt.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/cc0dLyEt.s:239    .rodata:000000000000008e DeviceDescriptor
     /tmp/cc0dLyEt.s:178    .rodata:0000000000000050 ConfigurationDescriptor
     /tmp/cc0dLyEt.s:121    .rodata:0000000000000000 ManufNameString
     /tmp/cc0dLyEt.s:171    .rodata:000000000000004c LanguageString
     /tmp/cc0dLyEt.s:149    .rodata:000000000000002c ProductString

UNDEFINED SYMBOLS
__do_copy_data
